import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, filters
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ Railway
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_DOMAIN = os.getenv("WEBHOOK_DOMAIN")

openai.api_key = OPENAI_API_KEY

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GPT
async def ask_gpt(prompt):
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã —á–µ–º–æ–¥–∞–Ω –±–µ–∑ —Ä—É—á–∫–∏. –ò—Ä–æ–Ω–∏—á–Ω—ã–π, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π. –ü–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º –Ω–µ –ø–æ–ø–∞—Å—Ç—å—Å—è –Ω–∞ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=400
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ OpenAI: {e}")
        return "‚ö†Ô∏è –ß–µ–º–æ–¥–∞–Ω –∑–∞—Å—Ç—ã–ª. –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    print(f"üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {user_input}")
    reply = await ask_gpt(user_input)
    await update.message.reply_text(f"üì¶ –ß–µ–º–æ–¥–∞–Ω –æ—Ç–≤–µ—á–∞–µ—Ç:\n\n{reply}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Webhook
def main():
    print("üì¶ –ß–µ–º–æ–¥–∞–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ webhook...")
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        webhook_url=f"{WEBHOOK_DOMAIN}/webhook"
    )

if __name__ == "__main__":
    main()
